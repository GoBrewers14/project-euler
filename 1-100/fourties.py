#-*- coding: utf-8 -*-


import itertools


# 43)
#The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.
#
#Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:
#
#    d2d3d4=406 is divisible by 2
#    d3d4d5=063 is divisible by 3
#    d4d5d6=635 is divisible by 5
#    d5d6d7=357 is divisible by 7
#    d6d7d8=572 is divisible by 11
#    d7d8d9=728 is divisible by 13
#    d8d9d10=289 is divisible by 17
#    Find the sum of all 0 to 9 pandigital numbers with this property.

nums = []
gen = []

for perms in itertools.permutations(range(10), 10):
    gen.append("".join([str(x) for x in perms]))

for gens in gen:
    if int(gens[1:4]) % 2 == 0:
        if int(gens[2:5]) % 3 == 0:
            if int(gens[3:6]) % 5 == 0:
                if int(gens[4:7]) % 7 == 0:
                    if int(gens[5:8]) % 11 == 0:
                        if int(gens[6:9]) % 13 == 0:
                            if int(gens[7:10]) % 17 == 0:
                                nums.append(gens)

ans = sum([int(x) for x in nums])


# 44)
#Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
#1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
#Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and
#D = |Pk − Pj| is minimised; what is the value of D?

def penta(n):
    return n * (3 * n - 1) / 2

d = { penta(x): True for x in xrange(1, 10001)  }
penta_keys = d.keys()

want = []

for k, i in enumerate(penta_keys):
    for j in penta_keys[k:]:
        if d.get(i+j, None) and d.get(abs(i-j)) is not None:
            want.append((i, j))

smallest = want[0]
ans = abs(smallest[0] - smallest[1])
