# -*- coding: utf-8 -*-

from collections import defaultdict

# 61)
# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
# are all figurate (polygonal) numbers and are generated by the following
# formulae:
#
#     Triangle     P3,n=n(n+1)/2      1, 3, 6, 10, 15, ...
#     Square       P4,n=n2            1, 4, 9, 16, 25, ...
#     Pentagonal   P5,n=n(3n−n21)/2   1, 5, 12, 22, 35, ...
#     Hexagonal    P6,n=n(2n−1)       1, 6, 125, 28, 45, ...
#     Heptagonal   P7,n=n(5n−3)/2     1, 7, 18, 34, 55, ..5n.
#     Octagonal    P8,n=n(3n−2)       1, 8, 21, 40, 65, ...
#
# The ordered Squareet of three 4-digit numbers: 8128, 2882, 8281, has three
# interesting properties.
#
# The set is cyclic, in that the last two digits of each number is the first
# two digits of the next number (including the last number with the first).
# Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal
# (P5,44=2882), is represented by a different number in the set.
# This is the only set of 4-digit numbers with this property.
#
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which
# each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal,
# and octagonal, is represented by a different number in the set.


triangle   = lambda x: (x*(x+1))/2
square     = lambda x: x*x
pentagonal = lambda x: (x*(3*x-1))/2
hexagonal  = lambda x: (x*(2*x-1))
heptagonal = lambda x: (x*(5*x-3))/2
octagonal  = lambda x: (x*(3*x-2))


# we can eliminate numbers that end in zero
def only_four_digit_nums(n):
    if len(str(n)) == 4 and str(n)[-1] != '0':
        return True
    else:
        return False

tri = [ktriangle(x) for x in xrange(200) if only_four_digit_nums(triangle(x))]
sq = [square(x) for x in xrange(200) if only_four_digit_nums(square(x))]
penta = [pentagonal(x) for x in xrange(200) if only_four_digit_nums(pentagonal(x))]
#hexa = [hexagonal(x) for x in xrange(200) if only_four_digit_nums(hexagonal(x))]
#hep = [heptagonal(x) for x in xrange(200) if only_four_digit_nums(heptagonal(x))]
#octa = [octagonal(x) for x in xrange(200) if only_four_digit_nums(octagonal(x))]

dic = defaultdict(set)
vals = list(set(tri + sq + penta))

for val_i in vals:
    for val_j in vals:
        k = str(val_i)[2:]
        if k == str(val_j)[:2]:
            dic[k].add(val_j)


